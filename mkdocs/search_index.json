{
    "docs": [
        {
            "location": "/", 
            "text": "~okeanos Lambda on Demand project\n\n\nAPI Endpoints - Description\n\n\nAPI Endpoints for lambda instances\n\n\n\n\nCreate Lambda Instance\n\n\nList Lambda Instances\n\n\nDetails of a Lambda Instance\n\n\nActions on a Lambda Instance\n\n\nDestroy a Lambda Instance\n\n\n\n\nAPI Endpoints for applications\n\n\n\n\nUpload an Application\n\n\nDelete an Application\n\n\nList Applications\n\n\nDetails of an Application\n\n\n\n\nAPI Endpoints for applications on a specified lambda instance\n\n\n\n\nDeploy an Application\n\n\nWithdraw an Application\n\n\nList Deployed Applications\n\n\nStart an Application\n\n\nStop an Application\n\n\n\n\nAPI Endpoints for authentication and generic use\n\n\n\n\nAuthentication\n\n\nGet SSH public keys on ~okeanos\n\n\nGet allowed VM Parameter Values", 
            "title": "Home"
        }, 
        {
            "location": "/#api-endpoints-description", 
            "text": "API Endpoints for lambda instances   Create Lambda Instance  List Lambda Instances  Details of a Lambda Instance  Actions on a Lambda Instance  Destroy a Lambda Instance   API Endpoints for applications   Upload an Application  Delete an Application  List Applications  Details of an Application   API Endpoints for applications on a specified lambda instance   Deploy an Application  Withdraw an Application  List Deployed Applications  Start an Application  Stop an Application   API Endpoints for authentication and generic use   Authentication  Get SSH public keys on ~okeanos  Get allowed VM Parameter Values", 
            "title": "API Endpoints - Description"
        }, 
        {
            "location": "/Authentication/", 
            "text": "API - authentication - Description\n\n\nThe authentication call, given an authentication token through the header Authorization, will\nconnect to the ~okeanos authentication service and check the validity of the given token. If\nthe token is valid then the API will reply with a \"200 Success\" code, otherwise it will return\nan \"401 Unauthorized\" error along with details regarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nAuthentication token validation\n\n\n\n\n\n\nURL\n\n\n/api/authenticate/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nExample of simple validation of an API token\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'http://\nhostname\n/api/authenticate/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then the response is\n\n\n{\n  \nstatus\n: 200,\n  \nresult\n: \nSuccess\n\n}\n\n\n\n\nIf the authentication token is not correct then the response is\n\n\n{\n  \nerrors\n: [\n    {\n      \nmessage\n: \nInvalid token\n,\n      \ncode\n: 401,\n      \ndetails\n: \nunauthorized\n\n    }\n  ]\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Authentication"
        }, 
        {
            "location": "/Authentication/#api-authentication-description", 
            "text": "The authentication call, given an authentication token through the header Authorization, will\nconnect to the ~okeanos authentication service and check the validity of the given token. If\nthe token is valid then the API will reply with a \"200 Success\" code, otherwise it will return\nan \"401 Unauthorized\" error along with details regarding the error.", 
            "title": "API - authentication - Description"
        }, 
        {
            "location": "/Authentication/#basic-parameters", 
            "text": "Type  Description      Description  Authentication token validation    URL  /api/authenticate/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/Authentication/#example", 
            "text": "Example of simple validation of an API token  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'http:// hostname /api/authenticate/'  Response body  If the authentication token is correct then the response is  {\n   status : 200,\n   result :  Success \n}  If the authentication token is not correct then the response is  {\n   errors : [\n    {\n       message :  Invalid token ,\n       code : 401,\n       details :  unauthorized \n    }\n  ]\n}  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/CreateLambdaInstance/", 
            "text": "API - create lambda instance - Description\n\n\nLambda instance creation call. Given an authentication token through the header authentication,\nand the instance specifications through other HTTP headers,\nit will firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will start creating a new lambda instance\nusing the instance specifications provided via the HTTP headers. For creating the cluster,\nthe Fokia library will be used. This library firstly uses kamaki to create the desired cluster of\nVMs, then runs ansible on the VMs to build a complete lambda instance. After starting the lambda\ninstance creation, the API will reply with the details of the cluster in creation, along with a\n\"200 Success\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nCreate a new lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/lambda-instance/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceu...\n\n\n\n\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\ninstance_name\n\n\nName of the lambda instance\n\n\nYes\n\n\nNone\n\n\nMy first Lambda Instance\n\n\n\n\n\n\nmaster_name\n\n\nName of the master node\n\n\nYes\n\n\nNone\n\n\nlambda-master\n\n\n\n\n\n\nslaves\n\n\nNumber of slaves\n\n\nYes\n\n\nNone\n\n\n3\n\n\n\n\n\n\nvcpus_master\n\n\nNumber of CPUs of the master node\n\n\nYes\n\n\nNone\n\n\n4\n\n\n\n\n\n\nvcpus_slave\n\n\nNumber of CPUs of each slave node\n\n\nYes\n\n\nNone\n\n\n2\n\n\n\n\n\n\nram_master\n\n\nAmount of RAM of master node in MB\n\n\nYes\n\n\nNone\n\n\n4096\n\n\n\n\n\n\nram_master\n\n\nAmount of RAM of each slave node in MB\n\n\nYes\n\n\nNone\n\n\n2048\n\n\n\n\n\n\ndisk_master\n\n\nAmount of HDD space of master node in GB\n\n\nYes\n\n\nNone\n\n\n40\n\n\n\n\n\n\ndisk_slave\n\n\nAmount of HDD space of each slave node in GB\n\n\nYes\n\n\nNone\n\n\n40\n\n\n\n\n\n\nip_allocation\n\n\nAllocation of public ips. Choose between none, master, all\n\n\nYes\n\n\nNone\n\n\nmaster\n\n\n\n\n\n\nnetwork_request\n\n\nNumber of private networks\n\n\nYes\n\n\nNone\n\n\n1\n\n\n\n\n\n\nproject_name\n\n\nName of the project\n\n\nYes\n\n\nNone\n\n\nlambda.grnet.gr\n\n\n\n\n\n\npublic_key_name\n\n\nName of public key to use for lambda instance\n\n\nNo\n None\n\n\nmy public key\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to create a new lambda instance, using the specs specified in the json-formatted body, and the authentication token specified by HTTP header.\n\n\nThe request in curl\n\n\ncurl -X POST -H \nContent-Type: application/json\n \\\n -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\n \\\n -d '{\nproject_name\n: \nlambda.grnet.gr\n, \ninstance_name\n: \nMy first Lambda Instance\n, \nnetwork_request\n: 1,\\\n \nmaster_name\n: \nlambda-master\n, \nvcpus_master\n: 4, \ndisk_slave\n: 40, \nslaves\n: 1, \nram_slave\n: 4096, \\\n \nram_master\n: 4096, \nvcpus_slave\n: 4, \nip_allocation\n: \nmaster\n, \ndisk_master\n: 40}' \\\n 'http://\nhostname\n/api/lambda-instance/'\n\n\n\n\nResponse body\n\n\nIf the authentication token and url is correct, and all the headers are given correctly, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nYour request to create a new lambda instance has been accepted\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \ndd0c8d65-0c52-4338-bcc1-6f82e57f2d37\n,\n      \nlinks\n: {\n        \nself\n: \nhttp://\nhostname\n/api/lambda-instances/dd0c8d65-0c52-4338-bcc1-6f82e57f2d37\n\n      }\n    }\n  ]\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Create Lambda Instance"
        }, 
        {
            "location": "/CreateLambdaInstance/#api-create-lambda-instance-description", 
            "text": "Lambda instance creation call. Given an authentication token through the header authentication,\nand the instance specifications through other HTTP headers,\nit will firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will start creating a new lambda instance\nusing the instance specifications provided via the HTTP headers. For creating the cluster,\nthe Fokia library will be used. This library firstly uses kamaki to create the desired cluster of\nVMs, then runs ansible on the VMs to build a complete lambda instance. After starting the lambda\ninstance creation, the API will reply with the details of the cluster in creation, along with a\n\"200 Success\" code.", 
            "title": "API - create lambda instance - Description"
        }, 
        {
            "location": "/CreateLambdaInstance/#basic-parameters", 
            "text": "Type  Description      Description  Create a new lambda instance    URL  /api/lambda-instance/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceu...     Body     Type  Description  Required  Default value  Example value      instance_name  Name of the lambda instance  Yes  None  My first Lambda Instance    master_name  Name of the master node  Yes  None  lambda-master    slaves  Number of slaves  Yes  None  3    vcpus_master  Number of CPUs of the master node  Yes  None  4    vcpus_slave  Number of CPUs of each slave node  Yes  None  2    ram_master  Amount of RAM of master node in MB  Yes  None  4096    ram_master  Amount of RAM of each slave node in MB  Yes  None  2048    disk_master  Amount of HDD space of master node in GB  Yes  None  40    disk_slave  Amount of HDD space of each slave node in GB  Yes  None  40    ip_allocation  Allocation of public ips. Choose between none, master, all  Yes  None  master    network_request  Number of private networks  Yes  None  1    project_name  Name of the project  Yes  None  lambda.grnet.gr    public_key_name  Name of public key to use for lambda instance  No  None  my public key", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/CreateLambdaInstance/#example", 
            "text": "In this example we are going to create a new lambda instance, using the specs specified in the json-formatted body, and the authentication token specified by HTTP header.  The request in curl  curl -X POST -H  Content-Type: application/json  \\\n -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR  \\\n -d '{ project_name :  lambda.grnet.gr ,  instance_name :  My first Lambda Instance ,  network_request : 1,\\\n  master_name :  lambda-master ,  vcpus_master : 4,  disk_slave : 40,  slaves : 1,  ram_slave : 4096, \\\n  ram_master : 4096,  vcpus_slave : 4,  ip_allocation :  master ,  disk_master : 40}' \\\n 'http:// hostname /api/lambda-instance/'  Response body  If the authentication token and url is correct, and all the headers are given correctly, a sample response is  {\n   status : {\n     short_description :  Your request to create a new lambda instance has been accepted ,\n     code : 202\n  },\n   data : [\n    {\n       id :  dd0c8d65-0c52-4338-bcc1-6f82e57f2d37 ,\n       links : {\n         self :  http:// hostname /api/lambda-instances/dd0c8d65-0c52-4338-bcc1-6f82e57f2d37 \n      }\n    }\n  ]\n}  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/LambdaInstancesList/", 
            "text": "API - lambda instances list - Description\n\n\nLambda instances list call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will return all the lambda\ninstances in JSON format along with a \"200 OK\" code. If there are no lambda instances the array\nof the returned lambda instances will be empty. Lambda instances can be viewed in pages with\na specified number of instances per page. This is possible by specifying the \"limit\" and \"offset\"\nGET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without\n\"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API\nwill reply with a \"400 Bad Request\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLists all lambda instances\n\n\n\n\n\n\nURL\n\n\n/api/lambda-instances/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber of lambda instances on each page\n\n\nNo\n\n\nNone\n\n\n3\n\n\n\n\n\n\noffset\n\n\nthe first lambda instance of the page\n\n\nNo\n\n\nNone\n\n\n2\n\n\n\n\n\n\n\n\nKeywords in response\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the lambda instance\n\n\nLambda Instance\n\n\n\n\n\n\nid\n\n\nUnique key identifying a lambda instance\n\n\nNone\n\n\n\n\n\n\nstatus\n\n\nThe status code of the response\n\n\nNone\n\n\n\n\n\n\nnext\n\n\nThe URL to be used to list the next lambda instance\n\n\nnull\n\n\n\n\n\n\nprevious\n\n\nThe URL to be used to list the previous lambda instance\n\n\nnull\n\n\n\n\n\n\ncount\n\n\nThe number of existing lambda instances\n\n\nNone\n\n\n\n\n\n\ncode\n\n\nA code defining the state of the lambda instance\n\n\n2\n\n\n\n\n\n\nmessage\n\n\nA literal explaining the code\n\n\nPENDING\n\n\n\n\n\n\ndetail\n\n\nSome details for the message\n\n\nLambda instance installation is pending.\n\n\n\n\n\n\nfailure_message\n\n\nAn optional message in case something went wrong\n\n\nNone\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to list all the available lambda instances.\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'http://\nhostname\n/api/lambda-instances/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instances\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nname\n: \nMy first Lambda Instance\n,\n      \nid\n: \n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      }\n    },\n    {\n      \nname\n: \nLambda Instance 1\n,\n      \nid\n: \nbc206a2a-b220-43e5-9d76-a7774de5c377\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      }\n    },\n    {\n      \nname\n: \nLambda Instance 2\n,\n      \nid\n: \nb141f48c-787b-4345-af6d-1e2e84a45c7e\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      }\n    },\n    {\n      \nname\n: \nLambda Instance 3\n,\n      \nid\n: \n8d8b574b-742e-4b90-9926-3c034dc40516\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      }\n    },\n    {\n      \nname\n: \nLambda Instance 4\n,\n      \nid\n: \nbbe29514-4f21-4960-89b3-becd82515ef3\n,\n      \nstatus\n: {\n        \nmessage\n: \nKAFKA_FAILED\n,\n        \ncode\n: \n17\n,\n        \ndetail\n: \nApache Kafka installation and configuration have failed.\n\n        \nfailure_message\n: \nAnsible task failed\n\n      }\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nIn this example we are going to list a limit of 2 lambda instances, starting from the third lambda instance.\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'http://\nhostname\n/backend/lambda-instances/?limit=2\noffset=3'\n\n\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \npagination\n: {\n    \ncount\n:5,\n    \nnext\n:null,\n    \nprevious\n:\nhttp://\nhostname\n/api/lambda-instances/?limit=2\noffset=1\n,\n  },\n  \ndata\n:[{\n      \nname\n:\nLambda Instance 3\n,\n      \nid\n:\n8d8b574b-742e-4b90-9926-3c034dc40516\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      }\n    },\n    {\n      \nname\n:\nLambda Instance 4\n,\n      \nid\n:\nbbe29514-4f21-4960-89b3-becd82515ef3\n,\n      \nstatus\n: {\n        \nmessage\n: \nKAFKA_FAILED\n,\n        \ncode\n: \n17\n,\n        \ndetail\n: \nApache Kafka installation and configuration have failed.\n\n        \nfailure_message\n: \nAnsible task failed\n\n      }\n    }\n  ],\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instances.\n,\n    \ncode\n: 200\n  }\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 400 BAD REQUEST : (Fail)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "List Lambda Instances"
        }, 
        {
            "location": "/LambdaInstancesList/#api-lambda-instances-list-description", 
            "text": "Lambda instances list call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will return all the lambda\ninstances in JSON format along with a \"200 OK\" code. If there are no lambda instances the array\nof the returned lambda instances will be empty. Lambda instances can be viewed in pages with\na specified number of instances per page. This is possible by specifying the \"limit\" and \"offset\"\nGET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without\n\"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API\nwill reply with a \"400 Bad Request\" code.", 
            "title": "API - lambda instances list - Description"
        }, 
        {
            "location": "/LambdaInstancesList/#basic-parameters", 
            "text": "Type  Description      Description  Lists all lambda instances    URL  /api/lambda-instances/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      limit  number of lambda instances on each page  No  None  3    offset  the first lambda instance of the page  No  None  2     Keywords in response     Name  Description  Default value      name  The name of the lambda instance  Lambda Instance    id  Unique key identifying a lambda instance  None    status  The status code of the response  None    next  The URL to be used to list the next lambda instance  null    previous  The URL to be used to list the previous lambda instance  null    count  The number of existing lambda instances  None    code  A code defining the state of the lambda instance  2    message  A literal explaining the code  PENDING    detail  Some details for the message  Lambda instance installation is pending.    failure_message  An optional message in case something went wrong  None", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/LambdaInstancesList/#example", 
            "text": "In this example we are going to list all the available lambda instances.  The request in curl  curl -X GET -H  Authentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'http:// hostname /api/lambda-instances/'  Response body  If the authentication token is correct, a sample response is  {\n   status : {\n     short_description :  Lambda instances ,\n     code : 200\n  },\n   data : [\n    {\n       name :  My first Lambda Instance ,\n       id :  9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      }\n    },\n    {\n       name :  Lambda Instance 1 ,\n       id :  bc206a2a-b220-43e5-9d76-a7774de5c377 ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      }\n    },\n    {\n       name :  Lambda Instance 2 ,\n       id :  b141f48c-787b-4345-af6d-1e2e84a45c7e ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      }\n    },\n    {\n       name :  Lambda Instance 3 ,\n       id :  8d8b574b-742e-4b90-9926-3c034dc40516 ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      }\n    },\n    {\n       name :  Lambda Instance 4 ,\n       id :  bbe29514-4f21-4960-89b3-becd82515ef3 ,\n       status : {\n         message :  KAFKA_FAILED ,\n         code :  17 ,\n         detail :  Apache Kafka installation and configuration have failed. \n         failure_message :  Ansible task failed \n      }\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  In this example we are going to list a limit of 2 lambda instances, starting from the third lambda instance.  The request in curl  curl -X GET -H  Authentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'http:// hostname /backend/lambda-instances/?limit=2 offset=3'  If the authentication token is correct, a sample response is  {\n   pagination : {\n     count :5,\n     next :null,\n     previous : http:// hostname /api/lambda-instances/?limit=2 offset=1 ,\n  },\n   data :[{\n       name : Lambda Instance 3 ,\n       id : 8d8b574b-742e-4b90-9926-3c034dc40516 ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      }\n    },\n    {\n       name : Lambda Instance 4 ,\n       id : bbe29514-4f21-4960-89b3-becd82515ef3 ,\n       status : {\n         message :  KAFKA_FAILED ,\n         code :  17 ,\n         detail :  Apache Kafka installation and configuration have failed. \n         failure_message :  Ansible task failed \n      }\n    }\n  ],\n   status : {\n     short_description :  Lambda instances. ,\n     code : 200\n  }\n}  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 400 BAD REQUEST : (Fail)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/LambdaInstanceDetails/", 
            "text": "API - lambda instance details - Description\n\n\nLambda instance details call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will search for the specified lambda\ninstance. If the specified lambda instance does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified lambda instance exists, the API will reply with the details\nof it along with a \"200 OK\" code. It is possible to only get the status relevant details or the\ninformation relevant details of the lambda instance. This can be done by using the \"filter\" GET\nparameter with the request. The values that this parameter should have are \"info\" or \"status\".\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet details of a specified lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/lambda-instances/[lambda-instance-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the specified lambda instance. For more information see \nList Lambda instances page\n .\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\nfilter\n\n\nSpecifies which details to return\n\n\nNo\n\n\nNone\n\n\ninfo\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to get the details of the lambda instance with id 3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'http://\nhostname\n/api/lambda-instances/3f763964-d519-4fd2-916d-b5cfbe3b878b/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instance details\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \ninfo\n: {\n        \ninstance_info\n: {\n          \nproject_name\n: \nlambda.grnet.gr\n,\n          \nmaster_name\n: \nlambda-master-2\n,\n          \nvcpus_master\n: 4,\n          \nnetwork_request\n: 1,\n          \ndisk_slave\n: 20,\n          \nslaves\n: 2,\n          \nram_slave\n: 4096,\n          \nram_master\n: 4096,\n          \nvcpus_slave\n: 4,\n          \nip_allocation\n: \nmaster\n,\n          \ndisk_master\n: 20,\n          \nmaster_node_id\n: 10000\n        },\n        \nid\n: \n3f763964-d519-4fd2-916d-b5cfbe3b878b\n,\n        \nname\n: \nMy first Lambda Instance\n\n      },\n      \nstatus\n: {\n        \nmessage\n: \nCLUSTER_FAILED\n,\n        \ncode\n: \n11\n,\n        \ndetails\n: \n~okeanos cluster build has failed.\n,\n        \nfailure_message\n: \nCyclades VMs out of limit\\n\n\n      }\n      \napplications\n: [\n        {\n          \nstarted\n: true,\n          \ntype\n: \nBATCH\n,\n          \nid\n: \neb9b1cda-1c81-4850-92f3-897b01d4685c\n\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\nIn this example we are going to get only the status details of the lambda instance with id 3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthentication: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'http://\nhostname\n/api/lambda-instances/3f763964-d519-4fd2-916d-b5cfbe3b878b/?filter=status'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instance details.\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nstatus\n: {\n        \nmessage\n: \nCLUSTER_FAILED\n,\n        \ncode\n: \n11\n,\n        \ndetails\n: \n~okeanos cluster build has failed.\n,\n        \nfailure_message\n: \nCyclades VMs out of limit\\n\n\n      },\n      \nid\n: \n3f763964-d519-4fd2-916d-b5cfbe3b878b\n,\n      \nname\n: \nMy first Lambda Instance\n\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Details of a Lambda Instance"
        }, 
        {
            "location": "/LambdaInstanceDetails/#api-lambda-instance-details-description", 
            "text": "Lambda instance details call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will search for the specified lambda\ninstance. If the specified lambda instance does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified lambda instance exists, the API will reply with the details\nof it along with a \"200 OK\" code. It is possible to only get the status relevant details or the\ninformation relevant details of the lambda instance. This can be done by using the \"filter\" GET\nparameter with the request. The values that this parameter should have are \"info\" or \"status\".", 
            "title": "API - lambda instance details - Description"
        }, 
        {
            "location": "/LambdaInstanceDetails/#basic-parameters", 
            "text": "Type  Description      Description  Get details of a specified lambda instance    URL  /api/lambda-instances/[lambda-instance-id]/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the specified lambda instance. For more information see  List Lambda instances page  .  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b    filter  Specifies which details to return  No  None  info", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/LambdaInstanceDetails/#example", 
            "text": "In this example we are going to get the details of the lambda instance with id 3f763964-d519-4fd2-916d-b5cfbe3b878b  The request in curl  curl -X GET -H  Authentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'http:// hostname /api/lambda-instances/3f763964-d519-4fd2-916d-b5cfbe3b878b/'  Response body  If the authentication token is correct, a sample response is  {\n   status : {\n     short_description :  Lambda instance details ,\n     code : 200\n  },\n   data : [\n    {\n       info : {\n         instance_info : {\n           project_name :  lambda.grnet.gr ,\n           master_name :  lambda-master-2 ,\n           vcpus_master : 4,\n           network_request : 1,\n           disk_slave : 20,\n           slaves : 2,\n           ram_slave : 4096,\n           ram_master : 4096,\n           vcpus_slave : 4,\n           ip_allocation :  master ,\n           disk_master : 20,\n           master_node_id : 10000\n        },\n         id :  3f763964-d519-4fd2-916d-b5cfbe3b878b ,\n         name :  My first Lambda Instance \n      },\n       status : {\n         message :  CLUSTER_FAILED ,\n         code :  11 ,\n         details :  ~okeanos cluster build has failed. ,\n         failure_message :  Cyclades VMs out of limit\\n \n      }\n       applications : [\n        {\n           started : true,\n           type :  BATCH ,\n           id :  eb9b1cda-1c81-4850-92f3-897b01d4685c \n        }\n      ]\n    }\n  ]\n}  In this example we are going to get only the status details of the lambda instance with id 3f763964-d519-4fd2-916d-b5cfbe3b878b  The request in curl  curl -X GET -H  Authentication: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'http:// hostname /api/lambda-instances/3f763964-d519-4fd2-916d-b5cfbe3b878b/?filter=status'  Response body  If the authentication token is correct, a sample response is  {\n   status : {\n     short_description :  Lambda instance details. ,\n     code : 200\n  },\n   data : [\n    {\n       status : {\n         message :  CLUSTER_FAILED ,\n         code :  11 ,\n         details :  ~okeanos cluster build has failed. ,\n         failure_message :  Cyclades VMs out of limit\\n \n      },\n       id :  3f763964-d519-4fd2-916d-b5cfbe3b878b ,\n       name :  My first Lambda Instance \n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/LambdaInstanceAction/", 
            "text": "API - lambda instance action - Description\n\n\nLambda instance action call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will search for the specified lambda\ninstance. If the specified lambda instance does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified lambda instance exists, the API will reply with a\n\"202 ACCEPTED\" code and will also begin to perform the specified action on the specified\nlambda instance. The available actions are start and stop.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nStart or stop a specified lambda instance\n\n\n\n\n\n\nURL\n\n\napi/lambda-instances/[lambda-instance-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the specified lambda instance. For more information see \nList Lambda instances page\n.\n\n\nYes\n\n\nNone\n\n\n3\n\n\n\n\n\n\naction\n\n\nThe action to perform on the lambda instance\n\n\nYes\n\n\nNone\n\n\nstart\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to start the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \naction=start\n \\\n 'http://\nhostname\n/api/lambda-instances/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/'\n\n\n\n\nResponse body\n\n\nIf the authentication is correct the response will be\n\n\n{\n  \nstatus\n: {\n    \ncode\n: 202,\n    \nshort-description\n: \nYour request has been accepted\n\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Actions on a Lambda Instance"
        }, 
        {
            "location": "/LambdaInstanceAction/#api-lambda-instance-action-description", 
            "text": "Lambda instance action call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will search for the specified lambda\ninstance. If the specified lambda instance does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified lambda instance exists, the API will reply with a\n\"202 ACCEPTED\" code and will also begin to perform the specified action on the specified\nlambda instance. The available actions are start and stop.", 
            "title": "API - lambda instance action - Description"
        }, 
        {
            "location": "/LambdaInstanceAction/#basic-parameters", 
            "text": "Type  Description      Description  Start or stop a specified lambda instance    URL  api/lambda-instances/[lambda-instance-id]/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the specified lambda instance. For more information see  List Lambda instances page .  Yes  None  3    action  The action to perform on the lambda instance  Yes  None  start", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/LambdaInstanceAction/#example", 
            "text": "In this example we are going to start the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X POST -H  Authentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  action=start  \\\n 'http:// hostname /api/lambda-instances/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/'  Response body  If the authentication is correct the response will be  {\n   status : {\n     code : 202,\n     short-description :  Your request has been accepted \n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/LambdaInstanceDestroy/", 
            "text": "API - lambda instance destroy - Description\n\n\nLambda instance destroy call, given an authentication token through the header Authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will reply with a \"202 ACCEPTED\" code\nand will start destroying all the VMs of the specified lambda instance along with the corresponding\npublic ip and private network.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDestroy a specified lambda instance\n\n\n\n\n\n\nURL\n\n\napi/lambda-instances/[lambda-instance-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nDELETE\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the specified lambda instance. For more information see \nList Lambda instances page\n.\n\n\nYes\n\n\nNone\n\n\n3\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to destroy the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X DELETE -H \nAuthentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'http://\nhostname\n/api/lambda-instances/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct the response will be\n\n\n{\n  \nstatus\n: {\n    \ncode\n: 202,\n    \nshort-description\n: \nYour request to destroy the specified lambda instance has been accepted\n\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Destroy a Lambda Instance"
        }, 
        {
            "location": "/LambdaInstanceDestroy/#api-lambda-instance-destroy-description", 
            "text": "Lambda instance destroy call, given an authentication token through the header Authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will reply with a \"202 ACCEPTED\" code\nand will start destroying all the VMs of the specified lambda instance along with the corresponding\npublic ip and private network.", 
            "title": "API - lambda instance destroy - Description"
        }, 
        {
            "location": "/LambdaInstanceDestroy/#basic-parameters", 
            "text": "Type  Description      Description  Destroy a specified lambda instance    URL  api/lambda-instances/[lambda-instance-id]/    HTTP Method  DELETE    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the specified lambda instance. For more information see  List Lambda instances page .  Yes  None  3", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/LambdaInstanceDestroy/#example", 
            "text": "In this example we are going to destroy the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X DELETE -H  Authentication:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'http:// hostname /api/lambda-instances/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/'  Response body  If the authentication token is correct the response will be  {\n   status : {\n     code : 202,\n     short-description :  Your request to destroy the specified lambda instance has been accepted \n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationUpload/", 
            "text": "API - application upload - Description\n\n\nApplication upload call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will reply with a \"202 ACCEPTED\" code\nand will start uploading the provided application to Pithos.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nUpload an application\n\n\n\n\n\n\nURL\n\n\napi/apps/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\ndescription\n\n\nA description of the application\n\n\nNo\n\n\nNone\n\n\n\n\n\n\n\n\nfile\n\n\nThe application file\n\n\nYes\n\n\nNone\n\n\n\n\n\n\n\n\ntype\n\n\nThe application type (batch/streaming)\n\n\nYes\n\n\nNone\n\n\n\n\n\n\n\n\nproject_name\n\n\nThe ~okeanos project name that has the needed quotas on Pithos\n\n\nNo\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to upload an application with description \"My application\", file\nname \"test_project\" and project name \"lambda.grnet.gr\".\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \ndescription=My application.\n  \\\n -F \nfile=@test_project\n \\\n -F \ntype=batch\n \\\n -F \nproject_name=lambda.grnet.gr\n \\\n 'http://\nhostname\n/api/apps/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response would be\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nYour request to upload the specified application has been accepted\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \n84dfb596-3abb-401e-99fc-c6f0057dedab\n,\n      \nlinks\n: {\n        \nself\n: \nhttp://\nhostname\n/api/apps/84dfb596-3abb-401e-99fc-c6f0057dedab\n\n      }\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 201 OK : (Success)\n\n\nHTTP/1.1 400 BAD REQUEST : (Fail)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Upload an Application"
        }, 
        {
            "location": "/ApplicationUpload/#api-application-upload-description", 
            "text": "Application upload call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will reply with a \"202 ACCEPTED\" code\nand will start uploading the provided application to Pithos.", 
            "title": "API - application upload - Description"
        }, 
        {
            "location": "/ApplicationUpload/#basic-parameters", 
            "text": "Type  Description      Description  Upload an application    URL  api/apps/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      description  A description of the application  No  None     file  The application file  Yes  None     type  The application type (batch/streaming)  Yes  None     project_name  The ~okeanos project name that has the needed quotas on Pithos  No  None", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationUpload/#example", 
            "text": "In this example we are going to upload an application with description \"My application\", file\nname \"test_project\" and project name \"lambda.grnet.gr\".  The request in curl  curl -X POST -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  description=My application.   \\\n -F  file=@test_project  \\\n -F  type=batch  \\\n -F  project_name=lambda.grnet.gr  \\\n 'http:// hostname /api/apps/'  Response body  If the authentication token is correct, a sample response would be  {\n   status : {\n     short_description :  Your request to upload the specified application has been accepted ,\n     code : 202\n  },\n   data : [\n    {\n       id :  84dfb596-3abb-401e-99fc-c6f0057dedab ,\n       links : {\n         self :  http:// hostname /api/apps/84dfb596-3abb-401e-99fc-c6f0057dedab \n      }\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 201 OK : (Success)  HTTP/1.1 400 BAD REQUEST : (Fail)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationDelete/", 
            "text": "API - application delete - Description\n\n\nApplication delete call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will search for the specified\napplication. If the specified application does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified application exists, the API will reply with a\n\"202 ACCEPTED\" code and will start deleting the specified application from Pithos.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDelete an application\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nDELETE\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the specified application. For more information see \nList Applications\n.\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to delete the application with id 84dfb596-3abb-401e-99fc-c6f0057dedab\n\n\nThe request in curl\n\n\ncurl -X DELETE -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n'http://\nhostname\n/api/apps/84dfb596-3abb-401e-99fc-c6f0057dedab/'\n\n\n\n\nResponse body\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to delete the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 201 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Delete an Application"
        }, 
        {
            "location": "/ApplicationDelete/#api-application-delete-description", 
            "text": "Application delete call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will search for the specified\napplication. If the specified application does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified application exists, the API will reply with a\n\"202 ACCEPTED\" code and will start deleting the specified application from Pithos.", 
            "title": "API - application delete - Description"
        }, 
        {
            "location": "/ApplicationDelete/#basic-parameters", 
            "text": "Type  Description      Description  Delete an application    URL  /api/apps/[application-id]/    HTTP Method  DELETE    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the specified application. For more information see  List Applications .  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationDelete/#example", 
            "text": "In this example we are going to delete the application with id 84dfb596-3abb-401e-99fc-c6f0057dedab  The request in curl  curl -X DELETE -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n'http:// hostname /api/apps/84dfb596-3abb-401e-99fc-c6f0057dedab/'  Response body  {\n   status : {\n     short-description :  Your request to delete the specified application has been accepted ,\n     code : 202\n  }\n}  Response messages  The main response messages are:   HTTP/1.1 201 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationsList/", 
            "text": "API - applications list - Description\n\n\nApplications list call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will return all the applications in JSON format along with a \"200 OK\" code. If there are no applications the array\nof the returned applications will be empty. Applications can be viewed in pages with\na specified number of them per page. This is possible by specifying the \"limit\" and \"offset\"\nGET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without\n\"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API\nwill reply with a \"400 Bad Request\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nList all applications\n\n\n\n\n\n\nURL\n\n\n/api/apps/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber of lambda instances on each page\n\n\nNo\n\n\nNone\n\n\n3\n\n\n\n\n\n\noffset\n\n\nthe first lambda instance of the page\n\n\nNo\n\n\nNone\n\n\n2\n\n\n\n\n\n\n\n\nKeywords in response\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the application\n\n\nNone\n\n\n\n\n\n\nid\n\n\nUnique key identifying a lambda i\n\n\nNone\n\n\n\n\n\n\nstatus\n\n\nThe status code of the response\n\n\nNone\n\n\n\n\n\n\nnext\n\n\nThe URL to be used to list the next lambda instance\n\n\nnull\n\n\n\n\n\n\nprevious\n\n\nThe URL to be used to list the previous lambda instance\n\n\nnull\n\n\n\n\n\n\ncount\n\n\nThe number of existing lambda instances\n\n\nNone\n\n\n\n\n\n\ndescription\n\n\nThe description of the application\n\n\nNone\n\n\n\n\n\n\npath\n\n\nThe path on Pithos where the application is saved\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to list all the available applications.\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'http://\nhostname\n/api/apps/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nApplications\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nname\n: \nproject.jar\n,\n      \nid\n: \n68e836e2-2ea4-4bb8-8b46-dcef869b3f08\n,\n      \ntype\n: \nSTREAMING\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      }\n    },\n    {\n      \nname\n: \ntest_file\n,\n      \nid\n: \n1b9f7773-f19d-426d-bc29-5434844e4537\n,\n      \ntype\n: \nSTREAMING\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      }\n    },\n    {\n      \nname\n: \ntest_file_2\n,\n      \nid\n: \ndddb18ae-5dab-4e9e-8914-3062b8853e24\n,\n      \ntype\n: \nSTREAMING\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      }\n    },\n    {\n      \nname\n: \ntest_file_3\n,\n      \nid\n: \nb3e5d867-c882-4f5e-a5c2-75193866f44e\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADING\n,\n        \ncode\n: \n1\n,\n        \ndetail\n: \nApplication is being uploaded\n\n      }\n    },\n    {\n      \nname\n: \ntest_file_4\n,\n      \nid\n: \na5623a2e-7742-4299-8ca4-c05e811d2262\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      }\n    },\n    {\n      \nname\n: \nproject1.jar\n,\n      \nid\n: \n5bda8e92-6397-493d-9aeb-a2fcf67b19a4\n,\n      \ntype\n: \nSTREAMING\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      }\n    },\n    {\n      \nname\n: \napplication.jar\n,\n      \nid\n: \n6fb97497-8d2c-45ed-bb7d-207e16b97c48\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nFAILED\n,\n        \ncode\n: \n2\n,\n        \ndetail\n: \nApplication upload has failed\n,\n        \nfailure_message\n: \nCouldn't reach remote host\n\n      }\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nIn this example we are going to list a limit of 2 applications, starting from the third\napplication.\n\n\nThe request in url\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'http://\nhostname\n/api/apps/?limit=2\noffset=3'\n\n\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \ndata\n: [\n    {\n      \nname\n: \ntest_file_3\n,\n      \nid\n: \nb3e5d867-c882-4f5e-a5c2-75193866f44e\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADING\n,\n        \ncode\n: \n1\n,\n        \ndetail\n: \nApplication is being uploaded\n\n      }\n    },\n    {\n      \nname\n: \ntest_file_4\n,\n      \nid\n: \na5623a2e-7742-4299-8ca4-c05e811d2262\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      }\n    }\n  ],\n  \npagination\n: {\n    \ncount\n: 7,\n    \nnext\n: \nhttp://\nhostname\n/api/apps/?limit=2\noffset=5\n,\n    \nprevious\n: \nhttp://\nhostname\n/api/apps/?limit=2\noffset=1\n\n  },\n  \nstatus\n: {\n    \nshort_description\n: \nApplications.\n,\n    \ncode\n: 200\n  }\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 400 BAD REQUEST : (Fail)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "List Applications"
        }, 
        {
            "location": "/ApplicationsList/#api-applications-list-description", 
            "text": "Applications list call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will return all the applications in JSON format along with a \"200 OK\" code. If there are no applications the array\nof the returned applications will be empty. Applications can be viewed in pages with\na specified number of them per page. This is possible by specifying the \"limit\" and \"offset\"\nGET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without\n\"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API\nwill reply with a \"400 Bad Request\" code.", 
            "title": "API - applications list - Description"
        }, 
        {
            "location": "/ApplicationsList/#basic-parameters", 
            "text": "Type  Description      Description  List all applications    URL  /api/apps/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      limit  number of lambda instances on each page  No  None  3    offset  the first lambda instance of the page  No  None  2     Keywords in response     Name  Description  Default value      name  The name of the application  None    id  Unique key identifying a lambda i  None    status  The status code of the response  None    next  The URL to be used to list the next lambda instance  null    previous  The URL to be used to list the previous lambda instance  null    count  The number of existing lambda instances  None    description  The description of the application  None    path  The path on Pithos where the application is saved", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationsList/#example", 
            "text": "In this example we are going to list all the available applications.  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'http:// hostname /api/apps/'  Response body  If the authentication token is correct, a sample response is  {\n   status : {\n     short_description :  Applications ,\n     code : 200\n  },\n   data : [\n    {\n       name :  project.jar ,\n       id :  68e836e2-2ea4-4bb8-8b46-dcef869b3f08 ,\n       type :  STREAMING ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      }\n    },\n    {\n       name :  test_file ,\n       id :  1b9f7773-f19d-426d-bc29-5434844e4537 ,\n       type :  STREAMING ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      }\n    },\n    {\n       name :  test_file_2 ,\n       id :  dddb18ae-5dab-4e9e-8914-3062b8853e24 ,\n       type :  STREAMING ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      }\n    },\n    {\n       name :  test_file_3 ,\n       id :  b3e5d867-c882-4f5e-a5c2-75193866f44e ,\n       type :  BATCH ,\n       status : {\n         message :  UPLOADING ,\n         code :  1 ,\n         detail :  Application is being uploaded \n      }\n    },\n    {\n       name :  test_file_4 ,\n       id :  a5623a2e-7742-4299-8ca4-c05e811d2262 ,\n       type :  BATCH ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      }\n    },\n    {\n       name :  project1.jar ,\n       id :  5bda8e92-6397-493d-9aeb-a2fcf67b19a4 ,\n       type :  STREAMING ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      }\n    },\n    {\n       name :  application.jar ,\n       id :  6fb97497-8d2c-45ed-bb7d-207e16b97c48 ,\n       type :  BATCH ,\n       status : {\n         message :  FAILED ,\n         code :  2 ,\n         detail :  Application upload has failed ,\n         failure_message :  Couldn't reach remote host \n      }\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  In this example we are going to list a limit of 2 applications, starting from the third\napplication.  The request in url  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'http:// hostname /api/apps/?limit=2 offset=3'  If the authentication token is correct, a sample response is  {\n   data : [\n    {\n       name :  test_file_3 ,\n       id :  b3e5d867-c882-4f5e-a5c2-75193866f44e ,\n       type :  BATCH ,\n       status : {\n         message :  UPLOADING ,\n         code :  1 ,\n         detail :  Application is being uploaded \n      }\n    },\n    {\n       name :  test_file_4 ,\n       id :  a5623a2e-7742-4299-8ca4-c05e811d2262 ,\n       type :  BATCH ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      }\n    }\n  ],\n   pagination : {\n     count : 7,\n     next :  http:// hostname /api/apps/?limit=2 offset=5 ,\n     previous :  http:// hostname /api/apps/?limit=2 offset=1 \n  },\n   status : {\n     short_description :  Applications. ,\n     code : 200\n  }\n}  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 400 BAD REQUEST : (Fail)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationDetails/", 
            "text": "API - application details - Description\n\n\nApplication details call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will search for the specified application. If the specified application does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified application exists, the API will reply with the details\nof it along with a \"200 OK\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDetails of an application\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the specified lambda instance. For more information see \nList Lambda instances page\n .\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to get the details of the application with id eb9b1cda-1c81-4850-92f3-897b01d4685c\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n'http://\nhostname\n/api/apps/eb9b1cda-1c81-4850-92f3-897b01d4685c/'\n\n\n\n\nResponse body\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nApplication details\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nname\n: \ntest_file_1\n,\n      \npath\n: \nlambda_applications\n,\n      \ntype\n: \nBATCH\n,\n      \ndescription\n: \nMy first application\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded.\n\n      },\n      \nlambda_instances\n: [\n        {\n          \nstarted\n: false,\n          \nid\n: \n3bc97580-45e1-4c39-90ae-0c2178431526\n\n        }\n      ],\n      \nid\n: \neb9b1cda-1c81-4850-92f3-897b01d4685c\n\n    }\n  ]\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Details of an Application"
        }, 
        {
            "location": "/ApplicationDetails/#api-application-details-description", 
            "text": "Application details call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will search for the specified application. If the specified application does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified application exists, the API will reply with the details\nof it along with a \"200 OK\" code.", 
            "title": "API - application details - Description"
        }, 
        {
            "location": "/ApplicationDetails/#basic-parameters", 
            "text": "Type  Description      Description  Details of an application    URL  /api/apps/[application-id]/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the specified lambda instance. For more information see  List Lambda instances page  .  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationDetails/#example", 
            "text": "In this example we are going to get the details of the application with id eb9b1cda-1c81-4850-92f3-897b01d4685c  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n'http:// hostname /api/apps/eb9b1cda-1c81-4850-92f3-897b01d4685c/'  Response body  {\n   status : {\n     short_description :  Application details ,\n     code : 200\n  },\n   data : [\n    {\n       name :  test_file_1 ,\n       path :  lambda_applications ,\n       type :  BATCH ,\n       description :  My first application ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded. \n      },\n       lambda_instances : [\n        {\n           started : false,\n           id :  3bc97580-45e1-4c39-90ae-0c2178431526 \n        }\n      ],\n       id :  eb9b1cda-1c81-4850-92f3-897b01d4685c \n    }\n  ]\n}  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationDeploy/", 
            "text": "API - application deploy - Description\n\n\nApplication deploy call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist. If any of these two doesn't exist, the API will reply with a \"404 Not Found\" code. If both the application and the lambda instance exist the API\nwill reply with a \"202 Accepted\" code and will start deploying the specified application on the specified lambda instance.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDeploy an application on a selected lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/deploy/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the application to be deployed\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\nlambda_instance_id\n\n\nThe id of the lambda instance on which the application will be deployed\n\n\nYes\n None\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to deploy the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \nlambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n \\\n 'http://\nhostname\n/api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/deploy/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, the response will be\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to deploy the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Deploy an Application"
        }, 
        {
            "location": "/ApplicationDeploy/#api-application-deploy-description", 
            "text": "Application deploy call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist. If any of these two doesn't exist, the API will reply with a \"404 Not Found\" code. If both the application and the lambda instance exist the API\nwill reply with a \"202 Accepted\" code and will start deploying the specified application on the specified lambda instance.", 
            "title": "API - application deploy - Description"
        }, 
        {
            "location": "/ApplicationDeploy/#basic-parameters", 
            "text": "Type  Description      Description  Deploy an application on a selected lambda instance    URL  /api/apps/[application-id]/deploy/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the application to be deployed  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b    lambda_instance_id  The id of the lambda instance on which the application will be deployed  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationDeploy/#example", 
            "text": "In this example we are going to deploy the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X POST -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  lambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  \\\n 'http:// hostname /api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/deploy/'  Response body  If the authentication token is correct, the response will be  {\n   status : {\n     short-description :  Your request to deploy the specified application has been accepted ,\n     code : 202\n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationWithdraw/", 
            "text": "API - application withdraw - Description\n\n\nApplication withdraw call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist. If any of these two doesn't exist, the API will reply with a \"404 Not Found\" code. If both the application and the lambda instance exist the API\nwill reply with a \"202 Accepted\" code and will start withdrawing the specified application from the specified lambda instance.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nWithdraw an application from a selected lamdba instance\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/withdraw/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the application to be withdrawn\n\n\nYes\n\n\nNone\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the lambda instance from which the application will be withdrawn\n\n\nYes\n None\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to withdraw the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c from the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \nlambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n \\\n 'http://\nhostname\n/api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/withdraw/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, the response will be\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to withdraw the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Withdraw an Application"
        }, 
        {
            "location": "/ApplicationWithdraw/#api-application-withdraw-description", 
            "text": "Application withdraw call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist. If any of these two doesn't exist, the API will reply with a \"404 Not Found\" code. If both the application and the lambda instance exist the API\nwill reply with a \"202 Accepted\" code and will start withdrawing the specified application from the specified lambda instance.", 
            "title": "API - application withdraw - Description"
        }, 
        {
            "location": "/ApplicationWithdraw/#basic-parameters", 
            "text": "Type  Description      Description  Withdraw an application from a selected lamdba instance    URL  /api/apps/[application-id]/withdraw/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the application to be withdrawn  Yes  None     lambda-instance-id  The id of the lambda instance from which the application will be withdrawn  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationWithdraw/#example", 
            "text": "In this example we are going to withdraw the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c from the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X POST -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  lambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  \\\n 'http:// hostname /api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/withdraw/'  Response body  If the authentication token is correct, the response will be  {\n   status : {\n     short-description :  Your request to withdraw the specified application has been accepted ,\n     code : 202\n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationsListDeployed/", 
            "text": "API - application list deployed - Description\n\n\napplication list deployed call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the specified lambda instance exists. If it doesn't, the API will response with a \"404 Not Found\" code. If the specified lambda instance exists, the API will return all the applications deployed on that lambda instance in JSON format along with a \"200 OK\" code. If there are no lambda instances the array of the returned applications will be empty. Applications can be viewed in pages with a specified number of instances per page. This is possible by specifying the \"limit\" and \"offset\" GET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without \"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API will reply with a \"400 Bad Request\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet a list of deployed applications\n\n\n\n\n\n\nURL\n\n\n/api/apps/[lambda-instance-id]/list-deployed/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the lambda instance\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to list all the deployed application on the lambda instance\nwith id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'http://\nhostname\n/api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response would be\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nApplications\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nname\n: \ntest_file_5\n,\n      \nid\n: \nd2e00532-d643-434c-9717-cd923a77f331\n\n    },\n    {\n      \nname\n: \ntest_big\n,\n      \nid\n: \n7186be3f-22ca-4e59-8e5f-fc381e92a67c\n\n    },\n    {\n      \nname\n: \ntest_file\n,\n      \nid\n: \n7c177dc2-4196-4b6e-ad43-4e316273ec39\n\n    },\n    {\n      \nname\n: \ntest_file_1\n,\n      \nid\n: \n4abe753e-84b8-43f5-9f1e-b97b120609f8\n\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nIn this example we are going to list a limit of 2 applications, starting from the third\napplication that are deployed on the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'http://\nhostname\n/api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/?limit=2\noffset=3'\n\n\n\n\nIf the authentication token is correct, a sample response would be\n\n\n{\n  \npagination\n: {\n    \ncount\n: 4,\n    \nnext\n: null,\n    \nprevious\n: \nhttp://\nhostname\n/api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/?limit=2\noffset=1\n,\n  },\n  \ndata\n: [\n    {\n      \nname\n: \ntest_file_1\n,\n      \nid\n: \n4abe753e-84b8-43f5-9f1e-b97b120609f8\n\n    }\n  ],\n  \nstatus\n: {\n    \nshort_description\n: \nApplications.\n,\n    \ncode\n: 200\n  }\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "List Deployed Applications"
        }, 
        {
            "location": "/ApplicationsListDeployed/#api-application-list-deployed-description", 
            "text": "application list deployed call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the specified lambda instance exists. If it doesn't, the API will response with a \"404 Not Found\" code. If the specified lambda instance exists, the API will return all the applications deployed on that lambda instance in JSON format along with a \"200 OK\" code. If there are no lambda instances the array of the returned applications will be empty. Applications can be viewed in pages with a specified number of instances per page. This is possible by specifying the \"limit\" and \"offset\" GET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without \"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API will reply with a \"400 Bad Request\" code.", 
            "title": "API - application list deployed - Description"
        }, 
        {
            "location": "/ApplicationsListDeployed/#basic-parameters", 
            "text": "Type  Description      Description  Get a list of deployed applications    URL  /api/apps/[lambda-instance-id]/list-deployed/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the lambda instance  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationsListDeployed/#example", 
            "text": "In this example we are going to list all the deployed application on the lambda instance\nwith id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'http:// hostname /api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/'  Response body  If the authentication token is correct, a sample response would be  {\n   status : {\n     short_description :  Applications ,\n     code : 200\n  },\n   data : [\n    {\n       name :  test_file_5 ,\n       id :  d2e00532-d643-434c-9717-cd923a77f331 \n    },\n    {\n       name :  test_big ,\n       id :  7186be3f-22ca-4e59-8e5f-fc381e92a67c \n    },\n    {\n       name :  test_file ,\n       id :  7c177dc2-4196-4b6e-ad43-4e316273ec39 \n    },\n    {\n       name :  test_file_1 ,\n       id :  4abe753e-84b8-43f5-9f1e-b97b120609f8 \n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  In this example we are going to list a limit of 2 applications, starting from the third\napplication that are deployed on the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'http:// hostname /api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/?limit=2 offset=3'  If the authentication token is correct, a sample response would be  {\n   pagination : {\n     count : 4,\n     next : null,\n     previous :  http:// hostname /api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/?limit=2 offset=1 ,\n  },\n   data : [\n    {\n       name :  test_file_1 ,\n       id :  4abe753e-84b8-43f5-9f1e-b97b120609f8 \n    }\n  ],\n   status : {\n     short_description :  Applications. ,\n     code : 200\n  }\n}  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationStart/", 
            "text": "API - application start - Description\n\n\nApplication start call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist, and if the application is deployed on the instance. If any of these conditions is not met, the API will reply with a \"404 Not Found\" code. If the application has already been started on the specified lambda instance, or the respective job type slot on the lambda instance is occupied, the API will reply with a \"409 Conflict\" code. If the application is deployed on the lambda instance, has not been started, and its job slot is free, the API\nwill reply with a \"202 Accepted\" code and will start the application on the lambda instance.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nStart an application on a selected lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/start/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the application to be started\n\n\nYes\n\n\nNone\n\n\n7186be3f-22ca-4e59-8e5f-fc381e92a67c\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the lambda instance on which the application will be started\n\n\nYes\n\n\nNone\n\n\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to start the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\n   curl -X POST -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n  \\\n   -F \nlambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n  \\\n   'http://\nhostname\n/api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/start/' \n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, the response will be\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to start the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)\n\n\nHTTP/1.1 409 CONFLICT : (Fail)", 
            "title": "Start an Application"
        }, 
        {
            "location": "/ApplicationStart/#api-application-start-description", 
            "text": "Application start call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist, and if the application is deployed on the instance. If any of these conditions is not met, the API will reply with a \"404 Not Found\" code. If the application has already been started on the specified lambda instance, or the respective job type slot on the lambda instance is occupied, the API will reply with a \"409 Conflict\" code. If the application is deployed on the lambda instance, has not been started, and its job slot is free, the API\nwill reply with a \"202 Accepted\" code and will start the application on the lambda instance.", 
            "title": "API - application start - Description"
        }, 
        {
            "location": "/ApplicationStart/#basic-parameters", 
            "text": "Type  Description      Description  Start an application on a selected lambda instance    URL  /api/apps/[application-id]/start/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the application to be started  Yes  None  7186be3f-22ca-4e59-8e5f-fc381e92a67c    lambda-instance-id  The id of the lambda instance on which the application will be started  Yes  None  9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationStart/#example", 
            "text": "In this example we are going to start the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl     curl -X POST -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY   \\\n   -F  lambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c   \\\n   'http:// hostname /api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/start/'   Response body  If the authentication token is correct, the response will be  {\n   status : {\n     short-description :  Your request to start the specified application has been accepted ,\n     code : 202\n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)  HTTP/1.1 409 CONFLICT : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/ApplicationStop/", 
            "text": "API - application stop - Description\n\n\nApplication stop call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist, and if the application is deployed on the instance. If any of these conditions is not met, the API will reply with a \"404 Not Found\" code. If the application has already been stopped on the specified lambda instance, or the respective job type slot on the lambda instance is free, the API will reply with a \"409 Conflict\" code. If the application is deployed on the lambda instance, has not been stopped, and its job slot is occupied, the API\nwill reply with a \"202 Accepted\" code and will stop the application on the lambda instance.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nStop an application  on a specified lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/stop/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the application to be stopped\n\n\nYes\n\n\nNone\n\n\n7186be3f-22ca-4e59-8e5f-fc381e92a67c\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the lambda instance on which the application will be stopped\n\n\nYes\n\n\nNone\n\n\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to stop the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \nlambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n \\\n 'http://\nhostname\n/api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/stop/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, the response will be\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to stop the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)\n\n\nHTTP/1.1 409 CONFLICT : (Fail)", 
            "title": "Stop an Application"
        }, 
        {
            "location": "/ApplicationStop/#api-application-stop-description", 
            "text": "Application stop call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist, and if the application is deployed on the instance. If any of these conditions is not met, the API will reply with a \"404 Not Found\" code. If the application has already been stopped on the specified lambda instance, or the respective job type slot on the lambda instance is free, the API will reply with a \"409 Conflict\" code. If the application is deployed on the lambda instance, has not been stopped, and its job slot is occupied, the API\nwill reply with a \"202 Accepted\" code and will stop the application on the lambda instance.", 
            "title": "API - application stop - Description"
        }, 
        {
            "location": "/ApplicationStop/#basic-parameters", 
            "text": "Type  Description      Description  Stop an application  on a specified lambda instance    URL  /api/apps/[application-id]/stop/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the application to be stopped  Yes  None  7186be3f-22ca-4e59-8e5f-fc381e92a67c    lambda-instance-id  The id of the lambda instance on which the application will be stopped  Yes  None  9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/ApplicationStop/#example", 
            "text": "In this example we are going to stop the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X POST -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  lambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  \\\n 'http:// hostname /api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/stop/'  Response body  If the authentication token is correct, the response will be  {\n   status : {\n     short-description :  Your request to stop the specified application has been accepted ,\n     code : 202\n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)  HTTP/1.1 409 CONFLICT : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/UserPublicKeys/", 
            "text": "API - User Public Keys - Description\n\n\nThe User public keys call, given an authentication token through the header Authorization, will\nconnect to the ~okeanos service and retrieve the user's saved public keys. If\nthe token is valid then the API will reply with a \"200 Success\" code, along with all the user's\npublic keys and the names that has been assigned to them. if the token is invalid it will return\nan \"401 Unauthorized\" error along with details regarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet user public keys\n\n\n\n\n\n\nURL\n\n\n/api/user-public-keys/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nIn the following example we are going to the get the keys uploaded on ~okeanos for\na specified user.\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n'http://\nhostname\n/api/user-public-keys/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then the response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nPublic keys uploaded to ~okeanos\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \ncontent\n: \nssh-rsa gfadsgdssAfadsds...\n,\n      \nfingerprint\n: \nFC:ds:...\n,\n      \nid\n: 1000,\n      \nname\n: \nkey-1\n,\n      \nuri\n: \n/userdata/keys/1000\n\n    },\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Get SSH public keys on ~okeanos"
        }, 
        {
            "location": "/UserPublicKeys/#api-user-public-keys-description", 
            "text": "The User public keys call, given an authentication token through the header Authorization, will\nconnect to the ~okeanos service and retrieve the user's saved public keys. If\nthe token is valid then the API will reply with a \"200 Success\" code, along with all the user's\npublic keys and the names that has been assigned to them. if the token is invalid it will return\nan \"401 Unauthorized\" error along with details regarding the error.", 
            "title": "API - User Public Keys - Description"
        }, 
        {
            "location": "/UserPublicKeys/#basic-parameters", 
            "text": "Type  Description      Description  Get user public keys    URL  /api/user-public-keys/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/UserPublicKeys/#example", 
            "text": "In the following example we are going to the get the keys uploaded on ~okeanos for\na specified user.  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n'http:// hostname /api/user-public-keys/'  Response body  If the authentication token is correct then the response is  {\n   status : {\n     short_description :  Public keys uploaded to ~okeanos ,\n     code : 200\n  },\n   data : [\n    {\n       content :  ssh-rsa gfadsgdssAfadsds... ,\n       fingerprint :  FC:ds:... ,\n       id : 1000,\n       name :  key-1 ,\n       uri :  /userdata/keys/1000 \n    },\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/VMParameterValues/", 
            "text": "API - VM parameter values - Description\n\n\nVM parameter values call, given an authentication token through the header Authorization, will connect to ~okeanos service and retrieve the allowed values\nof the parameters for creating a VM on ~okeanos. If the token is valid, the API will reply with a \"200 Success\" code along with all the available values. If the token is\ninvalid, the API will reply with a \"401 Unauthorized\" error along with details regarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet VM parameter values.\n\n\n\n\n\n\nURL\n\n\n/api/vm-parameter-values/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nIn the following example we will fetch all the allowed values of the parameters\nfor creating a VM on ~okeanos.\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n'http://\nhostname\n/api/vm-parameter-values/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then the response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nAllowed values of parameters for creating a Lambda Instance\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \ndisk\n: [\n        5,\n        10,\n        20,\n        40,\n        60\n      ],\n      \nvcpus\n: [\n        1,\n        2,\n        4,\n        8\n      ],\n      \nram\n: [\n        512,\n        1024,\n        2048,\n        4096,\n        6144,\n        8192\n      ]\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Get allower VM Parameter Values"
        }, 
        {
            "location": "/VMParameterValues/#api-vm-parameter-values-description", 
            "text": "VM parameter values call, given an authentication token through the header Authorization, will connect to ~okeanos service and retrieve the allowed values\nof the parameters for creating a VM on ~okeanos. If the token is valid, the API will reply with a \"200 Success\" code along with all the available values. If the token is\ninvalid, the API will reply with a \"401 Unauthorized\" error along with details regarding the error.", 
            "title": "API - VM parameter values - Description"
        }, 
        {
            "location": "/VMParameterValues/#basic-parameters", 
            "text": "Type  Description      Description  Get VM parameter values.    URL  /api/vm-parameter-values/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/VMParameterValues/#example", 
            "text": "In the following example we will fetch all the allowed values of the parameters\nfor creating a VM on ~okeanos.  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n'http:// hostname /api/vm-parameter-values/'  Response body  If the authentication token is correct then the response is  {\n   status : {\n     short_description :  Allowed values of parameters for creating a Lambda Instance ,\n     code : 200\n  },\n   data : [\n    {\n       disk : [\n        5,\n        10,\n        20,\n        40,\n        60\n      ],\n       vcpus : [\n        1,\n        2,\n        4,\n        8\n      ],\n       ram : [\n        512,\n        1024,\n        2048,\n        4096,\n        6144,\n        8192\n      ]\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }
    ]
}